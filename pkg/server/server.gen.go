// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Rate defines model for Rate.
type Rate struct {
	Code        string    `json:"code"`
	PublishedAt time.Time `json:"published_at"`
	Value       string    `json:"value"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Error *string `json:"error,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get latest exchange rate
	// (GET /api/v1/{currency})
	GetApiV1Currency(w http.ResponseWriter, r *http.Request, currency string)
	// Get all historical exchange rates
	// (GET /api/v1/{currency}/history)
	GetApiV1CurrencyHistory(w http.ResponseWriter, r *http.Request, currency string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get latest exchange rate
// (GET /api/v1/{currency})
func (_ Unimplemented) GetApiV1Currency(w http.ResponseWriter, r *http.Request, currency string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all historical exchange rates
// (GET /api/v1/{currency}/history)
func (_ Unimplemented) GetApiV1CurrencyHistory(w http.ResponseWriter, r *http.Request, currency string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiV1Currency operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Currency(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "currency" -------------
	var currency string

	err = runtime.BindStyledParameterWithOptions("simple", "currency", chi.URLParam(r, "currency"), &currency, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Currency(w, r, currency)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1CurrencyHistory operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1CurrencyHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "currency" -------------
	var currency string

	err = runtime.BindStyledParameterWithOptions("simple", "currency", chi.URLParam(r, "currency"), &currency, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1CurrencyHistory(w, r, currency)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/{currency}", wrapper.GetApiV1Currency)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/{currency}/history", wrapper.GetApiV1CurrencyHistory)
	})

	return r
}

type InternalServerErrorJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type NotFoundResponse struct {
}

type GetApiV1CurrencyRequestObject struct {
	Currency string `json:"currency"`
}

type GetApiV1CurrencyResponseObject interface {
	VisitGetApiV1CurrencyResponse(w http.ResponseWriter) error
}

type GetApiV1Currency200JSONResponse Rate

func (response GetApiV1Currency200JSONResponse) VisitGetApiV1CurrencyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiV1Currency404Response = NotFoundResponse

func (response GetApiV1Currency404Response) VisitGetApiV1CurrencyResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetApiV1Currency500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetApiV1Currency500JSONResponse) VisitGetApiV1CurrencyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiV1CurrencyHistoryRequestObject struct {
	Currency string `json:"currency"`
}

type GetApiV1CurrencyHistoryResponseObject interface {
	VisitGetApiV1CurrencyHistoryResponse(w http.ResponseWriter) error
}

type GetApiV1CurrencyHistory200JSONResponse []Rate

func (response GetApiV1CurrencyHistory200JSONResponse) VisitGetApiV1CurrencyHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiV1CurrencyHistory404Response = NotFoundResponse

func (response GetApiV1CurrencyHistory404Response) VisitGetApiV1CurrencyHistoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetApiV1CurrencyHistory500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetApiV1CurrencyHistory500JSONResponse) VisitGetApiV1CurrencyHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get latest exchange rate
	// (GET /api/v1/{currency})
	GetApiV1Currency(ctx context.Context, request GetApiV1CurrencyRequestObject) (GetApiV1CurrencyResponseObject, error)
	// Get all historical exchange rates
	// (GET /api/v1/{currency}/history)
	GetApiV1CurrencyHistory(ctx context.Context, request GetApiV1CurrencyHistoryRequestObject) (GetApiV1CurrencyHistoryResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetApiV1Currency operation middleware
func (sh *strictHandler) GetApiV1Currency(w http.ResponseWriter, r *http.Request, currency string) {
	var request GetApiV1CurrencyRequestObject

	request.Currency = currency

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1Currency(ctx, request.(GetApiV1CurrencyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1Currency")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiV1CurrencyResponseObject); ok {
		if err := validResponse.VisitGetApiV1CurrencyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiV1CurrencyHistory operation middleware
func (sh *strictHandler) GetApiV1CurrencyHistory(w http.ResponseWriter, r *http.Request, currency string) {
	var request GetApiV1CurrencyHistoryRequestObject

	request.Currency = currency

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1CurrencyHistory(ctx, request.(GetApiV1CurrencyHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1CurrencyHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiV1CurrencyHistoryResponseObject); ok {
		if err := validResponse.VisitGetApiV1CurrencyHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
